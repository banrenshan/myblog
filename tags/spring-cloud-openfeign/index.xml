<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>spring-cloud-openfeign on</title><link>https://banrenshan.github.io/tags/spring-cloud-openfeign/</link><description>Recent content in spring-cloud-openfeign on</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><copyright/><lastBuildDate>Sun, 27 Nov 2022 20:07:02 +0000</lastBuildDate><atom:link href="https://banrenshan.github.io/tags/spring-cloud-openfeign/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring-cloud-openfeign</title><link>https://banrenshan.github.io/blog/2022/11/spring-cloud-openfeign/</link><pubDate>Sun, 27 Nov 2022 20:07:02 +0000</pubDate><guid>https://banrenshan.github.io/blog/2022/11/spring-cloud-openfeign/</guid><description><![CDATA[Feign是一个声明式的Web服务客户端，web调用的代码仅仅只需要声明接口和注解。
它具有可插入的注释支持，包括Feign注释和JAX-RS注释。 Feign支持可插拔编码器和解码器。 增加了对Spring MVC注释的支持，并默认使用与Spring Web相同HttpMessageConverters。 Spring Cloud集成了CircuitBreaker和Eureka，Spring Cloud LoadBalancer。 快速入门 引入依赖 implementation &#39;org.springframework.cloud:spring-cloud-starter-openfeign&#39; 注解开启 @SpringBootApplication @EnableFeignClients public class Application { public static void main(String[] args) { SpringApplication.run(Application.class, args); } } 客户端声明 @FeignClient(&#34;stores&#34;) public interface StoreClient { @RequestMapping(method = RequestMethod.GET, value = &#34;/stores&#34;) List&lt;Store&gt; getStores(); @RequestMapping(method = RequestMethod.POST, value = &#34;/stores/{storeId}&#34;, consumes = &#34;application/json&#34;) Store update(@PathVariable(&#34;storeId&#34;) Long storeId, Store store); } @FeignClient的值是服务的名称,主要用来负载均衡.当然也可以用url属性来指定具体的地址.该接口在上下文中注册的bean名称是完全限定名称,你可以使用qualifier属性来指定别名.
上面的 load-balancer 客户端将要发现“strore”服务实际的物理地址。如果您的应用程序是Eureka客户端，那么它将解析Eureka服务注册表中的服务。如果您不想使用Eureka，则只需在外部配置中配置服务器列表即可.
Spring Cloud OpenFeign 支持 Spring Cloud LoadBalancer 阻塞模式下所有可用的功能]]></description></item></channel></rss>